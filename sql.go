// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package tiny_parser

import __yyfmt__ "fmt"

//line sql.y:18

//import "fmt"
//import "strings"
//import "runtime/debug"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func statementSeen(yylex interface{}) {
	if yylex.(*Tokenizer).stopAfterFirstStmt {
		yylex.(*Tokenizer).stopped = true
	}
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

func yyOldPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).OldPosition
}

func yySpecialCommentMode(yylex interface{}) bool {
	tkn := yylex.(*Tokenizer)
	return tkn.specialComment != nil
}

//line sql.y:65
type yySymType struct {
	yys           int
	empty         struct{}
	statement     Statement
	selStmt       SelectStatement
	ins           *Insert
	byt           byte
	bytes         []byte
	bytes2        [][]byte
	str           string
	int           int
	strs          []string
	selectExprs   SelectExprs
	selectExpr    SelectExpr
	columns       Columns
	exprs         Exprs
	boolVal       BoolVal
	boolean       bool
	sqlVal        *SQLVal
	colTuple      ColTuple
	values        Values
	aliasedvalues AliasedValues
	valTuple      ValTuple
	into          *Into
	colName       *ColName
	tableExprs    TableExprs
	tableExpr     TableExpr
	colIdent      ColIdent
	tableName     TableName
	expr          Expr
	tableIdent    TableIdent
}

const LEX_ERROR = 57346
const FOR_SYSTEM_TIME = 57347
const FOR_VERSION = 57348
const JSON_EXTRACT_OP = 57349
const JSON_UNQUOTE_EXTRACT_OP = 57350
const BIT = 57351
const TINYINT = 57352
const SMALLINT = 57353
const MEDIUMINT = 57354
const INT = 57355
const INTEGER = 57356
const BIGINT = 57357
const INTNUM = 57358
const SERIAL = 57359
const INT1 = 57360
const INT2 = 57361
const INT3 = 57362
const INT4 = 57363
const INT8 = 57364
const REAL = 57365
const DOUBLE = 57366
const FLOAT_TYPE = 57367
const DECIMAL = 57368
const NUMERIC = 57369
const DEC = 57370
const FIXED = 57371
const PRECISION = 57372
const TIME = 57373
const TIMESTAMP = 57374
const DATETIME = 57375
const CHAR = 57376
const VARCHAR = 57377
const BOOL = 57378
const CHARACTER = 57379
const VARBINARY = 57380
const NCHAR = 57381
const NVARCHAR = 57382
const NATIONAL = 57383
const VARYING = 57384
const VARCHARACTER = 57385
const TEXT = 57386
const TINYTEXT = 57387
const MEDIUMTEXT = 57388
const LONGTEXT = 57389
const LONG = 57390
const BLOB = 57391
const TINYBLOB = 57392
const MEDIUMBLOB = 57393
const LONGBLOB = 57394
const JSON = 57395
const ENUM = 57396
const GEOMETRY = 57397
const POINT = 57398
const LINESTRING = 57399
const POLYGON = 57400
const GEOMETRYCOLLECTION = 57401
const MULTIPOINT = 57402
const MULTILINESTRING = 57403
const MULTIPOLYGON = 57404
const LOCAL = 57405
const LOW_PRIORITY = 57406
const SKIP = 57407
const LOCKED = 57408
const NULLX = 57409
const AUTO_INCREMENT = 57410
const APPROXNUM = 57411
const SIGNED = 57412
const UNSIGNED = 57413
const ZEROFILL = 57414
const SRID = 57415
const COLLATION = 57416
const DATABASES = 57417
const SCHEMAS = 57418
const TABLES = 57419
const FULL = 57420
const PROCESSLIST = 57421
const COLUMNS = 57422
const FIELDS = 57423
const ENGINES = 57424
const PLUGINS = 57425
const NAMES = 57426
const CHARSET = 57427
const GLOBAL = 57428
const SESSION = 57429
const ISOLATION = 57430
const LEVEL = 57431
const READ = 57432
const WRITE = 57433
const ONLY = 57434
const REPEATABLE = 57435
const COMMITTED = 57436
const UNCOMMITTED = 57437
const SERIALIZABLE = 57438
const ENCRYPTION = 57439
const CURRENT_TIMESTAMP = 57440
const NOW = 57441
const DATABASE = 57442
const CURRENT_DATE = 57443
const CURRENT_USER = 57444
const CURRENT_TIME = 57445
const LOCALTIME = 57446
const LOCALTIMESTAMP = 57447
const UTC_DATE = 57448
const UTC_TIME = 57449
const UTC_TIMESTAMP = 57450
const REPLACE = 57451
const CONVERT = 57452
const CAST = 57453
const POSITION = 57454
const SUBSTR = 57455
const SUBSTRING = 57456
const TRIM = 57457
const LEADING = 57458
const TRAILING = 57459
const BOTH = 57460
const GROUP_CONCAT = 57461
const SEPARATOR = 57462
const TIMESTAMPADD = 57463
const TIMESTAMPDIFF = 57464
const EXTRACT = 57465
const GET_FORMAT = 57466
const OVER = 57467
const WINDOW = 57468
const GROUPING = 57469
const GROUPS = 57470
const CURRENT = 57471
const ROWS = 57472
const RANGE = 57473
const AVG = 57474
const BIT_AND = 57475
const BIT_OR = 57476
const BIT_XOR = 57477
const COUNT = 57478
const JSON_ARRAYAGG = 57479
const JSON_OBJECTAGG = 57480
const MAX = 57481
const MIN = 57482
const STDDEV_POP = 57483
const STDDEV = 57484
const STD = 57485
const STDDEV_SAMP = 57486
const SUM = 57487
const VAR_POP = 57488
const VARIANCE = 57489
const VAR_SAMP = 57490
const CUME_DIST = 57491
const DENSE_RANK = 57492
const FIRST_VALUE = 57493
const LAG = 57494
const LAST_VALUE = 57495
const LEAD = 57496
const NTH_VALUE = 57497
const NTILE = 57498
const ROW_NUMBER = 57499
const PERCENT_RANK = 57500
const RANK = 57501
const DUAL = 57502
const JSON_TABLE = 57503
const PATH = 57504
const AVG_ROW_LENGTH = 57505
const CHECKSUM = 57506
const TABLE_CHECKSUM = 57507
const COMPRESSION = 57508
const DIRECTORY = 57509
const DELAY_KEY_WRITE = 57510
const ENGINE_ATTRIBUTE = 57511
const INSERT_METHOD = 57512
const MAX_ROWS = 57513
const MIN_ROWS = 57514
const PACK_KEYS = 57515
const ROW_FORMAT = 57516
const SECONDARY_ENGINE = 57517
const SECONDARY_ENGINE_ATTRIBUTE = 57518
const STATS_AUTO_RECALC = 57519
const STATS_PERSISTENT = 57520
const STATS_SAMPLE_PAGES = 57521
const STORAGE = 57522
const DISK = 57523
const MEMORY = 57524
const DYNAMIC = 57525
const COMPRESSED = 57526
const REDUNDANT = 57527
const COMPACT = 57528
const LIST = 57529
const HASH = 57530
const PARTITIONS = 57531
const SUBPARTITION = 57532
const SUBPARTITIONS = 57533
const PREPARE = 57534
const DEALLOCATE = 57535
const MATCH = 57536
const AGAINST = 57537
const BOOLEAN = 57538
const LANGUAGE = 57539
const WITH = 57540
const QUERY = 57541
const EXPANSION = 57542
const MICROSECOND = 57543
const SECOND = 57544
const MINUTE = 57545
const HOUR = 57546
const DAY = 57547
const WEEK = 57548
const MONTH = 57549
const QUARTER = 57550
const YEAR = 57551
const SECOND_MICROSECOND = 57552
const MINUTE_MICROSECOND = 57553
const MINUTE_SECOND = 57554
const HOUR_MICROSECOND = 57555
const HOUR_SECOND = 57556
const HOUR_MINUTE = 57557
const DAY_MICROSECOND = 57558
const DAY_SECOND = 57559
const DAY_MINUTE = 57560
const DAY_HOUR = 57561
const YEAR_MONTH = 57562
const NAME = 57563
const SYSTEM = 57564
const ACCESSIBLE = 57565
const ASENSITIVE = 57566
const CUBE = 57567
const DELAYED = 57568
const DISTINCTROW = 57569
const EMPTY = 57570
const FLOAT4 = 57571
const FLOAT8 = 57572
const GET = 57573
const HIGH_PRIORITY = 57574
const INSENSITIVE = 57575
const IO_AFTER_GTIDS = 57576
const IO_BEFORE_GTIDS = 57577
const LINEAR = 57578
const MASTER_BIND = 57579
const MASTER_SSL_VERIFY_SERVER_CERT = 57580
const MIDDLEINT = 57581
const PURGE = 57582
const READ_WRITE = 57583
const RLIKE = 57584
const SENSITIVE = 57585
const SPECIFIC = 57586
const SQL_BIG_RESULT = 57587
const SQL_SMALL_RESULT = 57588
const UNUSED = 57589
const DESCRIPTION = 57590
const LATERAL = 57591
const MEMBER = 57592
const RECURSIVE = 57593
const BUCKETS = 57594
const CLONE = 57595
const COMPONENT = 57596
const DEFINITION = 57597
const ENFORCED = 57598
const NOT_ENFORCED = 57599
const EXCLUDE = 57600
const FOLLOWING = 57601
const GEOMCOLLECTION = 57602
const GET_MASTER_PUBLIC_KEY = 57603
const HISTOGRAM = 57604
const HISTORY = 57605
const INACTIVE = 57606
const INVISIBLE = 57607
const MASTER_COMPRESSION_ALGORITHMS = 57608
const MASTER_PUBLIC_KEY_PATH = 57609
const MASTER_TLS_CIPHERSUITES = 57610
const MASTER_ZSTD_COMPRESSION_LEVEL = 57611
const NESTED = 57612
const NETWORK_NAMESPACE = 57613
const NOWAIT = 57614
const NULLS = 57615
const OJ = 57616
const OLD = 57617
const ORDINALITY = 57618
const ORGANIZATION = 57619
const OTHERS = 57620
const PERSIST = 57621
const PERSIST_ONLY = 57622
const PRECEDING = 57623
const PRIVILEGE_CHECKS_USER = 57624
const PROCESS = 57625
const REFERENCE = 57626
const REQUIRE_ROW_FORMAT = 57627
const RESOURCE = 57628
const RESPECT = 57629
const RESTART = 57630
const RETAIN = 57631
const SECONDARY = 57632
const SECONDARY_LOAD = 57633
const SECONDARY_UNLOAD = 57634
const THREAD_PRIORITY = 57635
const TIES = 57636
const VCPU = 57637
const VISIBLE = 57638
const INFILE = 57639
const ACTIVE = 57640
const AGGREGATE = 57641
const ANY = 57642
const ARRAY = 57643
const ASCII = 57644
const AT = 57645
const AUTOEXTEND_SIZE = 57646
const GENERATED = 57647
const ALWAYS = 57648
const STORED = 57649
const VIRTUAL = 57650
const NVAR = 57651
const PASSWORD_LOCK = 57652
const OR = 57653
const XOR = 57654
const AND = 57655
const NOT = 57656
const BETWEEN = 57657
const CASE = 57658
const WHEN = 57659
const THEN = 57660
const ELSE = 57661
const ELSEIF = 57662
const END = 57663
const LE = 57664
const GE = 57665
const NE = 57666
const NULL_SAFE_EQUAL = 57667
const IS = 57668
const LIKE = 57669
const REGEXP = 57670
const IN = 57671
const ASSIGNMENT_OP = 57672
const UNBOUNDED = 57673
const ID = 57674
const NULL = 57675
const PARTITION = 57676
const SHIFT_LEFT = 57677
const SHIFT_RIGHT = 57678
const DIV = 57679
const MOD = 57680
const UNARY = 57681
const COLLATE = 57682
const BINARY = 57683
const UNDERSCORE_ARMSCII8 = 57684
const UNDERSCORE_ASCII = 57685
const UNDERSCORE_BIG5 = 57686
const UNDERSCORE_BINARY = 57687
const UNDERSCORE_CP1250 = 57688
const UNDERSCORE_CP1251 = 57689
const UNDERSCORE_CP1256 = 57690
const UNDERSCORE_CP1257 = 57691
const UNDERSCORE_CP850 = 57692
const UNDERSCORE_CP852 = 57693
const UNDERSCORE_CP866 = 57694
const UNDERSCORE_CP932 = 57695
const UNDERSCORE_DEC8 = 57696
const UNDERSCORE_EUCJPMS = 57697
const UNDERSCORE_EUCKR = 57698
const UNDERSCORE_GB18030 = 57699
const UNDERSCORE_GB2312 = 57700
const UNDERSCORE_GBK = 57701
const UNDERSCORE_GEOSTD8 = 57702
const UNDERSCORE_GREEK = 57703
const UNDERSCORE_HEBREW = 57704
const UNDERSCORE_HP8 = 57705
const UNDERSCORE_KEYBCS2 = 57706
const UNDERSCORE_KOI8R = 57707
const UNDERSCORE_KOI8U = 57708
const UNDERSCORE_LATIN1 = 57709
const UNDERSCORE_LATIN2 = 57710
const UNDERSCORE_LATIN5 = 57711
const UNDERSCORE_LATIN7 = 57712
const UNDERSCORE_MACCE = 57713
const UNDERSCORE_MACROMAN = 57714
const UNDERSCORE_SJIS = 57715
const UNDERSCORE_SWE7 = 57716
const UNDERSCORE_TIS620 = 57717
const UNDERSCORE_UCS2 = 57718
const UNDERSCORE_UJIS = 57719
const UNDERSCORE_UTF16 = 57720
const UNDERSCORE_UTF16LE = 57721
const UNDERSCORE_UTF32 = 57722
const UNDERSCORE_UTF8 = 57723
const UNDERSCORE_UTF8MB3 = 57724
const UNDERSCORE_UTF8MB4 = 57725
const INTERVAL = 57726
const EXCEPT = 57727
const UNION = 57728
const INTERSECT = 57729
const SELECT = 57730
const STREAM = 57731
const INSERT = 57732
const UPDATE = 57733
const DELETE = 57734
const FROM = 57735
const WHERE = 57736
const GROUP = 57737
const HAVING = 57738
const ORDER = 57739
const BY = 57740
const LIMIT = 57741
const OFFSET = 57742
const FOR = 57743
const CALL = 57744
const DISTINCT = 57745
const AS = 57746
const EXISTS = 57747
const ASC = 57748
const DESC = 57749
const DUPLICATE = 57750
const DEFAULT = 57751
const SET = 57752
const LOCK = 57753
const UNLOCK = 57754
const KEYS = 57755
const OF = 57756
const OUTFILE = 57757
const DUMPFILE = 57758
const DATA = 57759
const LOAD = 57760
const LINES = 57761
const TERMINATED = 57762
const ESCAPED = 57763
const ENCLOSED = 57764
const OPTIONALLY = 57765
const STARTING = 57766
const UNIQUE = 57767
const KEY = 57768
const SYSTEM_TIME = 57769
const CONTAINED = 57770
const VERSION = 57771
const VERSIONS = 57772
const VALUES = 57773
const LAST_INSERT_ID = 57774
const SQL_CALC_FOUND_ROWS = 57775
const NEXT = 57776
const VALUE = 57777
const SHARE = 57778
const MODE = 57779
const SQL_NO_CACHE = 57780
const SQL_CACHE = 57781
const JOIN = 57782
const STRAIGHT_JOIN = 57783
const LEFT = 57784
const RIGHT = 57785
const INNER = 57786
const OUTER = 57787
const CROSS = 57788
const NATURAL = 57789
const USE = 57790
const FORCE = 57791
const ON = 57792
const USING = 57793
const STRING = 57794
const HEX = 57795
const INTEGRAL = 57796
const FLOAT = 57797
const HEXNUM = 57798
const VALUE_ARG = 57799
const LIST_ARG = 57800
const COMMENT = 57801
const COMMENT_KEYWORD = 57802
const BIT_LITERAL = 57803
const TRUE = 57804
const FALSE = 57805
const OFF = 57806
const INTO = 57807
const ROW = 57808
const DATE = 57809
const ATTRIBUTE = 57810
const ACCOUNT = 57811
const ERROR = 57812

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"FOR_SYSTEM_TIME",
	"FOR_VERSION",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"SERIAL",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"VARCHARACTER",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"LOCAL",
	"LOW_PRIORITY",
	"SKIP",
	"LOCKED",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"SRID",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"ENCRYPTION",
	"CURRENT_TIMESTAMP",
	"NOW",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"POSITION",
	"SUBSTR",
	"SUBSTRING",
	"TRIM",
	"LEADING",
	"TRAILING",
	"BOTH",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"EXTRACT",
	"GET_FORMAT",
	"OVER",
	"WINDOW",
	"GROUPING",
	"GROUPS",
	"CURRENT",
	"ROWS",
	"RANGE",
	"AVG",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"COUNT",
	"JSON_ARRAYAGG",
	"JSON_OBJECTAGG",
	"MAX",
	"MIN",
	"STDDEV_POP",
	"STDDEV",
	"STD",
	"STDDEV_SAMP",
	"SUM",
	"VAR_POP",
	"VARIANCE",
	"VAR_SAMP",
	"CUME_DIST",
	"DENSE_RANK",
	"FIRST_VALUE",
	"LAG",
	"LAST_VALUE",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"ROW_NUMBER",
	"PERCENT_RANK",
	"RANK",
	"DUAL",
	"JSON_TABLE",
	"PATH",
	"AVG_ROW_LENGTH",
	"CHECKSUM",
	"TABLE_CHECKSUM",
	"COMPRESSION",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"SECONDARY_ENGINE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"STORAGE",
	"DISK",
	"MEMORY",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"LIST",
	"HASH",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"PREPARE",
	"DEALLOCATE",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"MICROSECOND",
	"SECOND",
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"YEAR",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"NAME",
	"SYSTEM",
	"ACCESSIBLE",
	"ASENSITIVE",
	"CUBE",
	"DELAYED",
	"DISTINCTROW",
	"EMPTY",
	"FLOAT4",
	"FLOAT8",
	"GET",
	"HIGH_PRIORITY",
	"INSENSITIVE",
	"IO_AFTER_GTIDS",
	"IO_BEFORE_GTIDS",
	"LINEAR",
	"MASTER_BIND",
	"MASTER_SSL_VERIFY_SERVER_CERT",
	"MIDDLEINT",
	"PURGE",
	"READ_WRITE",
	"RLIKE",
	"SENSITIVE",
	"SPECIFIC",
	"SQL_BIG_RESULT",
	"SQL_SMALL_RESULT",
	"UNUSED",
	"DESCRIPTION",
	"LATERAL",
	"MEMBER",
	"RECURSIVE",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"NOT_ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"SECONDARY",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"THREAD_PRIORITY",
	"TIES",
	"VCPU",
	"VISIBLE",
	"INFILE",
	"ACTIVE",
	"AGGREGATE",
	"ANY",
	"ARRAY",
	"ASCII",
	"AT",
	"AUTOEXTEND_SIZE",
	"GENERATED",
	"ALWAYS",
	"STORED",
	"VIRTUAL",
	"NVAR",
	"PASSWORD_LOCK",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT_OP",
	"UNBOUNDED",
	"ID",
	"NULL",
	"PARTITION",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_ARMSCII8",
	"UNDERSCORE_ASCII",
	"UNDERSCORE_BIG5",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_CP1250",
	"UNDERSCORE_CP1251",
	"UNDERSCORE_CP1256",
	"UNDERSCORE_CP1257",
	"UNDERSCORE_CP850",
	"UNDERSCORE_CP852",
	"UNDERSCORE_CP866",
	"UNDERSCORE_CP932",
	"UNDERSCORE_DEC8",
	"UNDERSCORE_EUCJPMS",
	"UNDERSCORE_EUCKR",
	"UNDERSCORE_GB18030",
	"UNDERSCORE_GB2312",
	"UNDERSCORE_GBK",
	"UNDERSCORE_GEOSTD8",
	"UNDERSCORE_GREEK",
	"UNDERSCORE_HEBREW",
	"UNDERSCORE_HP8",
	"UNDERSCORE_KEYBCS2",
	"UNDERSCORE_KOI8R",
	"UNDERSCORE_KOI8U",
	"UNDERSCORE_LATIN1",
	"UNDERSCORE_LATIN2",
	"UNDERSCORE_LATIN5",
	"UNDERSCORE_LATIN7",
	"UNDERSCORE_MACCE",
	"UNDERSCORE_MACROMAN",
	"UNDERSCORE_SJIS",
	"UNDERSCORE_SWE7",
	"UNDERSCORE_TIS620",
	"UNDERSCORE_UCS2",
	"UNDERSCORE_UJIS",
	"UNDERSCORE_UTF16",
	"UNDERSCORE_UTF16LE",
	"UNDERSCORE_UTF32",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_UTF8MB3",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"EXCEPT",
	"UNION",
	"INTERSECT",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"OF",
	"OUTFILE",
	"DUMPFILE",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"OPTIONALLY",
	"STARTING",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"CONTAINED",
	"VERSION",
	"VERSIONS",
	"VALUES",
	"LAST_INSERT_ID",
	"SQL_CALC_FOUND_ROWS",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"'@'",
	"':'",
	"STRING",
	"HEX",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"TRUE",
	"FALSE",
	"OFF",
	"INTO",
	"ROW",
	"DATE",
	"ATTRIBUTE",
	"ACCOUNT",
	"ERROR",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 472

var yyAct = [...]int8{
	73, 74, 15, 45, 15, 6, 49, 15, 86, 15,
	85, 84, 83, 33, 57, 33, 73, 74, 25, 33,
	60, 24, 26, 5, 59, 28, 45, 68, 14, 30,
	36, 47, 21, 19, 35, 9, 12, 39, 41, 24,
	34, 11, 22, 10, 27, 48, 23, 3, 7, 2,
	1, 44, 29, 22, 18, 32, 20, 40, 31, 38,
	46, 56, 58, 55, 37, 53, 54, 52, 32, 70,
	69, 66, 51, 50, 0, 0, 0, 0, 17, 0,
	0, 0, 0, 61, 0, 0, 44, 0, 44, 62,
	64, 67, 65, 45, 38, 45, 82, 0, 63, 37,
	0, 17, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 13, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 43,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 17, 0,
	17, 0, 0, 17, 0, 17, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 43, 0, 43, 0,
	0, 13, 0, 13, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 16, 42, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 25, 0, 0, 4, 26,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 24, 0, 33, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 16, 42, 16,
	42, 8, 16, 0, 16, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 33, 0, 0,
	71, 75, 77, 78, 79, 80, 0, 0, 0, 76,
	0, 0, 0, 0, 0, 72, 71, 75, 77, 78,
	79, 80, 0, 0, 0, 76, 0, 0, 0, 0,
	0, 72,
}

var yyPact = [...]int16{
	-86, -1000, -485, -1000, -123, -123, -1000, -427, -125, -1000,
	-373, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -427, -1000,
	-1000, -1000, -130, -479, -1000, -1000, -1000, -1000, -220, -1000,
	-427, -453, -449, -1000, -1000, -427, -374, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -447, -1000, -445, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -427, -128, -1000, -197,
	-479, -31, -1000, -1000, -1000, -1000, -455, -1000, -1000, -1000,
	-1000, -1000, -460, -461, -463, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -15, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int8{
	0, 43, 73, 71, 31, 27, 70, 69, 60, 40,
	58, 57, 30, 56, 33, 32, 41, 35, 48, 38,
	28, 36, 37, 50, 49, 47, 34, 29, 46, 45,
}

var yyR1 = [...]int8{
	0, 23, 23, 24, 25, 25, 13, 13, 13, 26,
	27, 10, 10, 9, 9, 9, 9, 9, 15, 15,
	8, 8, 4, 4, 29, 29, 3, 3, 28, 28,
	18, 18, 17, 17, 17, 17, 1, 1, 2, 2,
	2, 2, 5, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 6, 14, 12, 12, 11, 11,
	16, 19, 20, 21, 22,
}

var yyR2 = [...]int8{
	0, 1, 2, 1, 3, 3, 1, 3, 4, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 2, 3,
	1, 3, 4, 3, 0, 1, 1, 3, 1, 1,
	2, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -23, -24, -25, 404, 109, 490, -18, 484, -17,
	-1, -16, -21, 336, -20, 132, 487, 298, -18, -14,
	-13, -15, -26, -28, 466, 445, 449, -17, 398, -14,
	-27, -10, -15, 468, -9, -26, -12, -16, -21, -22,
	-11, -19, 488, 336, -20, 223, -8, -4, -29, 485,
	-2, -1, -19, -21, -22, -15, -27, 467, -27, 398,
	467, -26, -15, -9, -12, -4, -3, -27, -5, -6,
	-7, 471, 486, 31, 32, 472, 480, 473, 474, 475,
	476, 337, -27, 467, 471, 471, 471, -5,
}

var yyDef = [...]int8{
	0, -2, 1, 3, 0, 0, 2, 0, 0, 31,
	32, 34, 35, 36, 37, 60, 63, 62, 0, 4,
	55, 6, 0, 24, 9, 28, 29, 30, 0, 5,
	0, 0, 0, 10, 11, 0, 14, 15, 16, 17,
	56, 57, 64, 58, 59, 61, 18, 20, 0, 25,
	33, 38, 39, 40, 41, 7, 0, 0, 19, 0,
	24, 0, 8, 12, 13, 21, 0, 23, 26, 42,
	54, 43, 0, 0, 0, 47, 48, 49, 50, 51,
	52, 53, 22, 0, 44, 45, 46, 27,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 315, 3, 3, 3, 348, 340, 3,
	466, 468, 345, 343, 467, 344, 398, 346, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 470, 490,
	324, 323, 325, 3, 469, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 339, 3, 351,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 316, 57658, 317, 57659, 318,
	57660, 319, 57661, 320, 57662, 321, 57663, 322, 57664, 326,
	57665, 327, 57666, 328, 57667, 329, 57668, 330, 57669, 331,
	57670, 332, 57671, 333, 57672, 334, 57673, 335, 57674, 336,
	57675, 337, 57676, 338, 57677, 341, 57678, 342, 57679, 347,
	57680, 349, 57681, 352, 57682, 353, 57683, 354, 57684, 355,
	57685, 356, 57686, 357, 57687, 358, 57688, 359, 57689, 360,
	57690, 361, 57691, 362, 57692, 363, 57693, 364, 57694, 365,
	57695, 366, 57696, 367, 57697, 368, 57698, 369, 57699, 370,
	57700, 371, 57701, 372, 57702, 373, 57703, 374, 57704, 375,
	57705, 376, 57706, 377, 57707, 378, 57708, 379, 57709, 380,
	57710, 381, 57711, 382, 57712, 383, 57713, 384, 57714, 385,
	57715, 386, 57716, 387, 57717, 388, 57718, 389, 57719, 390,
	57720, 391, 57721, 392, 57722, 393, 57723, 394, 57724, 395,
	57725, 396, 57726, 397, 57727, 399, 57728, 400, 57729, 401,
	57730, 402, 57731, 403, 57732, 404, 57733, 405, 57734, 406,
	57735, 407, 57736, 408, 57737, 409, 57738, 410, 57739, 411,
	57740, 412, 57741, 413, 57742, 414, 57743, 415, 57744, 416,
	57745, 417, 57746, 418, 57747, 419, 57748, 420, 57749, 421,
	57750, 422, 57751, 423, 57752, 424, 57753, 425, 57754, 426,
	57755, 427, 57756, 428, 57757, 429, 57758, 430, 57759, 431,
	57760, 432, 57761, 433, 57762, 434, 57763, 435, 57764, 436,
	57765, 437, 57766, 438, 57767, 439, 57768, 440, 57769, 441,
	57770, 442, 57771, 443, 57772, 444, 57773, 445, 57774, 446,
	57775, 447, 57776, 448, 57777, 449, 57778, 450, 57779, 451,
	57780, 452, 57781, 453, 57782, 454, 57783, 455, 57784, 456,
	57785, 457, 57786, 458, 57787, 459, 57788, 460, 57789, 461,
	57790, 462, 57791, 463, 57792, 464, 57793, 465, 57794, 471,
	57795, 472, 57796, 473, 57797, 474, 57798, 475, 57799, 476,
	57800, 477, 57801, 478, 57802, 479, 57803, 480, 57804, 481,
	57805, 482, 57806, 483, 57807, 484, 57808, 485, 57809, 486,
	57810, 487, 57811, 488, 57812, 489, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  *yySymType
	stack []*yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{lval: new(yySymType)}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL = new(yySymType)
	var yyDollar []*yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	//if yyp >= len(yyS) {
	//	nyys := make([]*yySymType, len(yyS)*2)
	//	copy(nyys, yyS)
	//	yyS = nyys
	//	for i := range yyS {
	//		if yyS[i] == nil {
	//			yyS[i] = new(yySymType)
	//		}
	//	}
	//}
	yyVAL.yys = yystate
	if yyp < len(yyS) {
		yyS[yyp] = yyVAL
	} else {
		yyS = append(yyS, yyVAL)
	}

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
		for _, v := range yyS {
			__yyfmt__.Printf("%d ", v.yys)
		}
		__yyfmt__.Print("\n")
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	//if yyp+1 >= len(yyS) {
	//	nyys := make([]*yySymType, len(yyS), len(yyS)*2)
	//	copy(nyys, yyS)
	//	yyS = nyys
	//}
	//if yyp < len(yyS) {
	//	yyS = yyS[:yyp+1]
	//}
	//yyVAL = yyS[yyp+1]
	yyVAL = new(yySymType)
	//yyS = append(yyS, yyVAL)

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:347
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:351
		{
			setParseTree(yylex, yyDollar[1].statement)
			statementSeen(yylex)
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:358
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:365
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[3].ins
			ins.Action = InsertStr
			ins.Table = yyDollar[2].tableName
			yyVAL.statement = ins
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:373
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[3].ins
			ins.Action = ReplaceStr
			ins.Table = yyDollar[2].tableName
			yyVAL.statement = ins
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:382
		{
			yyVAL.ins = yyDollar[1].ins
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:386
		{
			yyDollar[3].ins.Columns = []ColIdent{}
			yyVAL.ins = yyDollar[3].ins
		}
	case 8:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:391
		{
			yyDollar[4].ins.Columns = yyDollar[2].columns
			yyVAL.ins = yyDollar[4].ins
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:398
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:407
		{
			decNesting(yylex)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:413
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:417
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:424
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:428
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:432
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:436
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:440
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:450
		{
			yyVAL.ins = &Insert{Rows: &AliasedValues{Values: yyDollar[2].values}}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:454
		{
			yyVAL.ins = yyDollar[2].ins
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:460
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:464
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:471
		{
			yyVAL.valTuple = ValTuple(yyDollar[3].exprs)
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:475
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:512
		{
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:514
		{
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:519
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:523
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:533
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:537
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:553
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:557
		{
			yyVAL.tableName = TableName{DbQualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:561
		{
			yyVAL.tableName = TableName{Name: NewTableIdent(string(yyDollar[1].bytes))}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:565
		{
			yyVAL.tableName = TableName{Name: NewTableIdent(string(yyDollar[1].bytes))}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:579
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:583
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:591
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:595
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:599
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:632
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:638
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:642
		{
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:646
		{
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:650
		{
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:654
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:658
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:662
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:666
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:670
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:674
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:678
		{
			yyVAL.expr = &NullVal{}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:684
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:862
		{
			yyVAL.ins = yyDollar[1].ins
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:897
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:901
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	}
	goto yystack /* stack new state and value */
}
